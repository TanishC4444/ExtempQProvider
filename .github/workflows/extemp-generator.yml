name: Extemp Question Generator
on:
  schedule:
    # Run every 7 hours to maximize processing time per run
    - cron: '0 */7 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths: [ 'extemp_generator.py' ] # Only run when the extemp script changes

jobs:
  generate-extemp:
    runs-on: ubuntu-latest
    timeout-minutes: 350 # Use almost the full 6-hour GitHub Actions limit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Pull latest changes
      run: |
        echo "Pulling latest changes before starting..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git pull origin main --rebase || git pull origin main --no-rebase || echo "Pull failed, continuing..."
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
    - name: Install Python dependencies
      run: |
        pip3 install --upgrade pip
        pip3 install llama-cpp-python==0.2.11
        pip3 install huggingface-hub==0.17.3
        
    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p articles
        
    - name: Check for cached model
      id: cache-model
      uses: actions/cache@v4
      with:
        path: models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
        key: mistral-model-v1
        restore-keys: |
          mistral-model-
          
    - name: Download Mistral model
      if: steps.cache-model.outputs.cache-hit != 'true'
      run: |
        cd models
        huggingface-cli download TheBloke/Mistral-7B-Instruct-v0.1-GGUF mistral-7b-instruct-v0.1.Q4_K_M.gguf --local-dir . --local-dir-use-symlinks False
      env:
        HF_HUB_DISABLE_PROGRESS_BARS: 1
        
    - name: Verify model download
      run: |
        ls -la models/
        if [ ! -f "models/mistral-7b-instruct-v0.1.Q4_K_M.gguf" ]; then
          echo "Model file not found!"
          exit 1
        fi
        echo "Model size: $(ls -lh models/mistral-7b-instruct-v0.1.Q4_K_M.gguf | awk '{print $5}')"
        
    - name: Check for articles to process
      id: check-articles
      run: |
        # Create empty file if it doesn't exist
        if [ ! -f "articles/news_articles.txt" ]; then
          echo "Creating empty articles file..."
          touch articles/news_articles.txt
        fi
        
        # Check if file has content
        if [ ! -s "articles/news_articles.txt" ]; then
          echo "Articles file is empty. Nothing to process."
          echo "has_articles=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count articles
        article_count=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
        echo "Found $article_count articles to process"
        echo "has_articles=true" >> $GITHUB_OUTPUT
        echo "article_count=$article_count" >> $GITHUB_OUTPUT
        
        if [ "$article_count" -eq "0" ]; then
          echo "No articles to process."
          echo "has_articles=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Show current articles status
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== BEFORE PROCESSING ==="
        echo "üì∞ Total articles in input file: $(grep -c '^Link: ' articles/news_articles.txt || echo '0')"
        echo "üìù Current extemp file size: $(wc -l < extemp_questions.txt 2>/dev/null || echo '0') lines"
        echo "üîç First few links to be processed:"
        grep "^Link: " articles/news_articles.txt | head -5
        
    - name: Run Extemp generator
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "Starting Extemp generation at $(date)"
        timeout 340m python3 extemp_generator.py || {
          echo "Extemp generation completed/timed out at $(date)"
        }
        echo "Extemp generation completed at $(date)"
      env:
        MODEL_PATH: ./models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
        INPUT_FILE: ./articles/news_articles.txt
        
    - name: Check generated output
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== AFTER PROCESSING ==="
        
        if [ -f "extemp_questions.txt" ]; then
          extemp_lines=$(wc -l < extemp_questions.txt)
          extemp_size=$(ls -lh extemp_questions.txt | awk '{print $5}')
          echo "üìù Extemp file: $extemp_lines lines, $extemp_size"
          
          # Count generated question sets
          question_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
          echo "‚ùì Total question sets generated: $question_sets"
          
          # Count individual questions
          individual_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          echo "üéØ Total individual questions: $individual_questions"
          
          echo "üìã Last few lines of extemp file:"
          tail -10 extemp_questions.txt
        else
          echo "‚ùå No extemp file generated"
        fi
        
        echo ""
        if [ -f "articles/news_articles.txt" ]; then
          remaining_articles=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
          echo "üì∞ Remaining articles: $remaining_articles"
          
          if [ "$remaining_articles" -gt "0" ]; then
            echo "üîç Next articles to process:"
            grep "^Link: " articles/news_articles.txt | head -3
          fi
        else
          echo "üì∞ No articles file remaining"
        fi
        
    - name: Create conflict resolution script
      run: |
        cat > resolve_conflicts.py << 'SCRIPT_END'
        #!/usr/bin/env python3
        import os
        import sys
        import re
        
        def read_articles(filename):
            if not os.path.exists(filename):
                return []
                
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
            except Exception as e:
                print(f"Error reading file {filename}: {e}")
                return []

            if not content.strip():
                return []

            articles = []
            # Normalize line endings first
            content = content.replace('\r\n', '\n').replace('\r', '\n')
            
            # Split by double newline, but be more flexible
            article_blocks = re.split(r'\n\s*\n+', content.strip())
            
            for block in article_blocks:
                block = block.strip()
                if not block:
                    continue
                    
                lines = [line.strip() for line in block.split('\n') if line.strip()]
                
                current_link = None
                article_lines = []
                in_article = False
                
                for line in lines:
                    if line.startswith("Link: "):
                        current_link = line
                        in_article = False
                        article_lines = []
                    elif line.startswith("Article: "):
                        # Start collecting article text
                        article_content = line[len("Article: "):].strip()
                        if article_content:  # If there's content on the same line
                            article_lines = [article_content]
                        else:
                            article_lines = []
                        in_article = True
                    elif in_article and current_link:
                        # Continue collecting article text
                        article_lines.append(line)
                
                # Join all article lines and add to articles list
                if current_link and article_lines:
                    current_article = ' '.join(article_lines).strip()
                    if current_article and len(current_article) > 50:  # Only add substantial articles
                        articles.append((current_link, current_article))
            
            return articles
        
        def write_remaining_articles(filename, remaining_articles):
            with open(filename, 'w', encoding='utf-8') as f:
                for i, (link, article) in enumerate(remaining_articles):
                    f.write(f"{link}\n")
                    f.write(f"Article: {article}\n")
                    if i < len(remaining_articles) - 1:
                        f.write("\n")
        
        input_file = sys.argv[1] if len(sys.argv) > 1 else 'articles/news_articles.txt'
        batch_size = int(sys.argv[2]) if len(sys.argv) > 2 else 200
        
        all_articles = read_articles(input_file)
        remaining_articles = all_articles[batch_size:]
        write_remaining_articles(input_file, remaining_articles)
        print(f"Kept {len(remaining_articles)} articles, removed first {batch_size}")
        SCRIPT_END
        chmod +x resolve_conflicts.py

    - name: Commit and push changes
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "Checking for changes to commit..."
        
        # Add files that may have changed
        git add articles/news_articles.txt extemp_questions.txt 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "üìù No changes to commit"
        else
          # Create a descriptive commit message
          if [ -f "extemp_questions.txt" ]; then
            question_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
            individual_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          else
            question_sets="0"
            individual_questions="0"
          fi
          
          remaining_articles=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
          
          git commit -m "üéØ Extemp Generation Run #${GITHUB_RUN_NUMBER:-0} - $question_sets sets ($individual_questions questions), $remaining_articles articles remaining [$(date '+%Y-%m-%d %H:%M UTC')]"
          
          # Try to push with proper merge handling
          for i in {1..5}; do
            if git push; then
              echo "‚úÖ Changes committed and pushed successfully"
              break
            else
              echo "‚ö†Ô∏è Push attempt $i failed, merging remote changes..."
              
              # Pull and merge remote changes
              git fetch origin main
              
              # Check if there are actual conflicts or just need to merge
              if git merge origin/main --no-edit; then
                echo "‚úÖ Successfully merged remote changes"
              else
                echo "üîß Merge conflicts detected, resolving..."
                
                # Check if conflict is in articles file
                if git status --porcelain | grep -q "articles/news_articles.txt"; then
                  echo "üì∞ Resolving conflict in news_articles.txt"
                  
                  # Use the version from origin (has new articles) and re-apply our logic
                  git checkout origin/main -- articles/news_articles.txt
                  
                  # Re-apply our processing logic to remove processed articles
                  echo "Re-applying article removals..."
                  python3 resolve_conflicts.py articles/news_articles.txt 200
                  
                  # Mark as resolved
                  git add articles/news_articles.txt
                else
                  echo "üìÑ Resolving other conflicts automatically"
                  # For extemp_questions.txt conflicts, prefer our version (has new questions)
                  if git status --porcelain | grep -q "extemp_questions.txt"; then
                    git add extemp_questions.txt
                  fi
                fi
                
                # Complete the merge
                git commit --no-edit || git commit -m "Merge remote changes with Extemp generation updates"
              fi
              
              # Update commit message with current counts
              current_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
              current_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
              current_remaining=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
              git commit --amend -m "üéØ Extemp Generation Run #${GITHUB_RUN_NUMBER:-0} - $current_sets sets ($current_questions questions), $current_remaining articles remaining [$(date '+%Y-%m-%d %H:%M UTC')]" || true
              
              if [ $i -eq 5 ]; then
                echo "‚ùå Failed to push after 5 attempts"
                exit 1
              fi
              sleep 3
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: extemp-generation-${{ github.run_number }}
        path: |
          articles/
          extemp_questions.txt
        retention-days: 7
        
    - name: Run summary
      if: always()
      run: |
        echo "=== RUN SUMMARY ==="
        echo "üöÄ Workflow: ${{ github.workflow }}"
        echo "üìÖ Run: ${{ github.run_number }}"
        echo "‚è∞ Completed: $(date)"
        
        if [ -f "extemp_questions.txt" ]; then
          total_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
          total_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          echo "‚úÖ Total question sets: $total_sets"
          echo "üéØ Total individual questions: $total_questions"
        fi
        
        if [ -f "articles/news_articles.txt" ]; then
          remaining=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
          echo "üì∞ Articles remaining: $remaining"
          
          if [ "$remaining" -gt "0" ]; then
            echo "üí° Next run will process more articles"
          else
            echo "üéâ All articles have been processed!"
          fi
        fi
        
    - name: Clean up large files
      run: |
        # Clean up the model file to save space (it will be cached)
        rm -rf models/
      if: always()