name: Extemp Question Generator
on:
  schedule:
    # Run every 7 hours to maximize processing time per run
    - cron: '0 */7 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths: [ '*.py' ] # Run when any Python script changes

jobs:
  generate-extemp:
    runs-on: ubuntu-latest
    timeout-minutes: 350 # Use almost the full 6-hour GitHub Actions limit
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Pull latest changes
      run: |
        echo "Pulling latest changes before starting..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git pull origin main --rebase || git pull origin main --no-rebase || echo "Pull failed, continuing..."
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        
    - name: Install Python dependencies
      run: |
        pip3 install --upgrade pip
        pip3 install llama-cpp-python==0.2.11
        pip3 install huggingface-hub==0.17.3
        
    - name: Create directories
      run: |
        mkdir -p models
        mkdir -p articles
        
    - name: Check for cached model
      id: cache-model
      uses: actions/cache@v4
      with:
        path: models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
        key: mistral-model-v1
        restore-keys: |
          mistral-model-
          
    - name: Download Mistral model
      if: steps.cache-model.outputs.cache-hit != 'true'
      run: |
        cd models
        huggingface-cli download TheBloke/Mistral-7B-Instruct-v0.1-GGUF mistral-7b-instruct-v0.1.Q4_K_M.gguf --local-dir . --local-dir-use-symlinks False
      env:
        HF_HUB_DISABLE_PROGRESS_BARS: 1
        
    - name: Verify model download
      run: |
        ls -la models/
        if [ ! -f "models/mistral-7b-instruct-v0.1.Q4_K_M.gguf" ]; then
          echo "Model file not found!"
          exit 1
        fi
        echo "Model size: $(ls -lh models/mistral-7b-instruct-v0.1.Q4_K_M.gguf | awk '{print $5}')"
        
    - name: Check for articles to process
      id: check-articles
      run: |
        # Create empty file if it doesn't exist
        if [ ! -f "articles/news_articles.txt" ]; then
          echo "Creating empty articles file..."
          touch articles/news_articles.txt
        fi
        
        # Check if file has content
        if [ ! -s "articles/news_articles.txt" ]; then
          echo "Articles file is empty. Nothing to process."
          echo "has_articles=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Count articles
        article_count=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
        echo "Found $article_count articles to process"
        echo "has_articles=true" >> $GITHUB_OUTPUT
        echo "article_count=$article_count" >> $GITHUB_OUTPUT
        
        if [ "$article_count" -eq "0" ]; then
          echo "No articles to process."
          echo "has_articles=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Show current articles status
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== BEFORE PROCESSING ==="
        echo "üì∞ Total articles in input file: $(grep -c '^Link: ' articles/news_articles.txt || echo '0')"
        echo "üìù Current extemp file size: $(wc -l < extemp_questions.txt 2>/dev/null || echo '0') lines"
        echo "üîç First few links to be processed:"
        grep "^Link: " articles/news_articles.txt | head -5
        
    - name: Create backup of articles file
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        cp articles/news_articles.txt articles/news_articles.txt.pre_processing_backup
        echo "‚úÖ Created backup of articles file before processing"
        
    - name: Run Extemp generator
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "Starting Extemp generation at $(date)"
        
        # Find the correct Python script file
        if [ -f "extemp_generator.py" ]; then
          SCRIPT_FILE="extemp_generator.py"
        elif [ -f "extemp.py" ]; then
          SCRIPT_FILE="extemp.py"
        else
          # Find any Python file that contains extemp-related functions
          SCRIPT_FILE=$(find . -name "*.py" -exec grep -l "generate_extemp_questions\|NSDA.*Extemp" {} \; | head -1)
          if [ -z "$SCRIPT_FILE" ]; then
            echo "‚ùå No extemp generator script found!"
            ls -la *.py 2>/dev/null || echo "No Python files found"
            exit 1
          fi
        fi
        
        echo "üìÑ Using script file: $SCRIPT_FILE"
        
        # Store initial article count
        INITIAL_COUNT=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
        echo "üìä Starting with $INITIAL_COUNT articles"
        
        # Run the generator with timeout
        timeout 340m python3 "$SCRIPT_FILE" || {
          echo "Extemp generation completed/timed out at $(date)"
        }
        
        # Check how many articles remain after processing
        FINAL_COUNT=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
        PROCESSED_COUNT=$((INITIAL_COUNT - FINAL_COUNT))
        
        echo "üìä Processing complete:"
        echo "   - Started with: $INITIAL_COUNT articles"
        echo "   - Remaining: $FINAL_COUNT articles" 
        echo "   - Processed: $PROCESSED_COUNT articles"
        
        echo "Extemp generation completed at $(date)"
      env:
        MODEL_PATH: ./models/mistral-7b-instruct-v0.1.Q4_K_M.gguf
        INPUT_FILE: ./articles/news_articles.txt
        
    - name: Verify article removal
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== VERIFYING ARTICLE REMOVAL ==="
        
        INITIAL_COUNT=$(grep -c "^Link: " articles/news_articles.txt.pre_processing_backup || echo "0")
        FINAL_COUNT=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
        PROCESSED_COUNT=$((INITIAL_COUNT - FINAL_COUNT))
        
        echo "üìä Article processing verification:"
        echo "   - Articles before processing: $INITIAL_COUNT"
        echo "   - Articles after processing: $FINAL_COUNT"
        echo "   - Articles processed and removed: $PROCESSED_COUNT"
        
        if [ "$PROCESSED_COUNT" -gt "0" ]; then
          echo "‚úÖ Articles were successfully processed and removed"
        else
          echo "‚ö†Ô∏è No articles were removed - this might indicate a problem"
        fi
        
        # Clean up backup
        rm -f articles/news_articles.txt.pre_processing_backup
        
    - name: Check generated output
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== AFTER PROCESSING ==="
        
        if [ -f "extemp_questions.txt" ]; then
          extemp_lines=$(wc -l < extemp_questions.txt)
          extemp_size=$(ls -lh extemp_questions.txt | awk '{print $5}')
          echo "üìù Extemp file: $extemp_lines lines, $extemp_size"
          
          # Count generated question sets
          question_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
          echo "‚ùì Total question sets generated: $question_sets"
          
          # Count individual questions
          individual_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          echo "üéØ Total individual questions: $individual_questions"
          
          echo "üìã Last few lines of extemp file:"
          tail -10 extemp_questions.txt
        else
          echo "‚ùå No extemp file generated"
        fi
        
        echo ""
        if [ -f "articles/news_articles.txt" ]; then
          remaining_articles=$(grep -c "^Link: " articles/news_articles.txt || echo "0")
          echo "üì∞ Remaining articles: $remaining_articles"
          
          if [ "$remaining_articles" -gt "0" ]; then
            echo "üîç Next articles to process:"
            grep "^Link: " articles/news_articles.txt | head -3
          fi
        else
          echo "üì∞ No articles file remaining"
        fi

    - name: Commit and push changes
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "Checking for changes to commit..."
        
        # Add files that may have changed
        git add articles/news_articles.txt extemp_questions.txt 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "üìù No changes to commit"
        else
          # Create a descriptive commit message
          if [ -f "extemp_questions.txt" ]; then
            question_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
            individual_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          else
            question_sets="0"
            individual_questions="0"
          fi
          
          remaining_articles=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
          
          git commit -m "üéØ Extemp Generation Run #${GITHUB_RUN_NUMBER:-0} - $question_sets sets ($individual_questions questions), $remaining_articles articles remaining [$(date '+%Y-%m-%d %H:%M UTC')]"
          
          # Try to push with proper merge handling
          for i in {1..5}; do
            if git push; then
              echo "‚úÖ Changes committed and pushed successfully"
              break
            else
              echo "‚ö†Ô∏è Push attempt $i failed, merging remote changes..."
              
              # Pull and merge remote changes
              git fetch origin main
              
              # Check if there are actual conflicts or just need to merge
              if git merge origin/main --no-edit; then
                echo "‚úÖ Successfully merged remote changes"
              else
                echo "üîß Merge conflicts detected, resolving..."
                
                # Check if conflict is in articles file
                if git status --porcelain | grep -q "articles/news_articles.txt"; then
                  echo "üì∞ Resolving conflict in news_articles.txt"
                  
                  # For articles file conflicts, we need to be careful
                  # Our version has removed processed articles, remote might have new articles
                  # We want to keep the new articles from remote but not re-add processed ones
                  
                  # Get our version (processed articles removed)
                  git show HEAD:articles/news_articles.txt > our_articles.txt 2>/dev/null || touch our_articles.txt
                  
                  # Get remote version (might have new articles)
                  git show origin/main:articles/news_articles.txt > remote_articles.txt 2>/dev/null || touch remote_articles.txt
                  
                  # Count articles in each version
                  OUR_COUNT=$(grep -c "^Link: " our_articles.txt 2>/dev/null || echo "0")
                  REMOTE_COUNT=$(grep -c "^Link: " remote_articles.txt 2>/dev/null || echo "0")
                  
                  echo "üìä Conflict resolution:"
                  echo "   - Our version: $OUR_COUNT articles"
                  echo "   - Remote version: $REMOTE_COUNT articles"
                  
                  # If remote has more articles, use remote version (new articles were added)
                  # If our version has fewer articles, use our version (we processed some)
                  if [ "$REMOTE_COUNT" -gt "$OUR_COUNT" ]; then
                    echo "üì∞ Using remote version (has more articles - new articles were added)"
                    git checkout origin/main -- articles/news_articles.txt
                  else
                    echo "üì∞ Using our version (articles were processed and removed)"
                    git checkout HEAD -- articles/news_articles.txt
                  fi
                  
                  # Clean up temporary files
                  rm -f our_articles.txt remote_articles.txt
                  
                  # Mark as resolved
                  git add articles/news_articles.txt
                else
                  echo "üìÑ Resolving other conflicts automatically"
                  # For extemp_questions.txt conflicts, prefer our version (has new questions)
                  if git status --porcelain | grep -q "extemp_questions.txt"; then
                    git checkout HEAD -- extemp_questions.txt
                    git add extemp_questions.txt
                  fi
                fi
                
                # Complete the merge
                git commit --no-edit || git commit -m "Merge remote changes with Extemp generation updates"
              fi
              
              # Update commit message with current counts
              if [ -f "extemp_questions.txt" ]; then
                current_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
                current_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
              else
                current_sets="0"
                current_questions="0"
              fi
              current_remaining=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
              
              git commit --amend -m "üéØ Extemp Generation Run #${GITHUB_RUN_NUMBER:-0} - $current_sets sets ($current_questions questions), $current_remaining articles remaining [$(date '+%Y-%m-%d %H:%M UTC')]" || true
              
              if [ $i -eq 5 ]; then
                echo "‚ùå Failed to push after 5 attempts"
                exit 1
              fi
              sleep 3
            fi
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Validate article processing
      if: steps.check-articles.outputs.has_articles == 'true'
      run: |
        echo "=== FINAL VALIDATION ==="
        
        # Check if articles were actually processed and removed
        CURRENT_COUNT=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
        INITIAL_COUNT="${{ steps.check-articles.outputs.article_count }}"
        
        echo "üìä Processing validation:"
        echo "   - Initial article count: $INITIAL_COUNT"
        echo "   - Current article count: $CURRENT_COUNT"
        echo "   - Articles processed: $((INITIAL_COUNT - CURRENT_COUNT))"
        
        if [ "$CURRENT_COUNT" -lt "$INITIAL_COUNT" ]; then
          echo "‚úÖ Articles were successfully processed and removed from the file"
        else
          echo "‚ö†Ô∏è No articles were removed - this might indicate a processing issue"
        fi
        
        # Validate extemp questions were generated
        if [ -f "extemp_questions.txt" ]; then
          QUESTION_COUNT=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          if [ "$QUESTION_COUNT" -gt "0" ]; then
            echo "‚úÖ Extemp questions were successfully generated"
          else
            echo "‚ö†Ô∏è No extemp questions found in output file"
          fi
        else
          echo "‚ö†Ô∏è No extemp questions file found"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: extemp-generation-${{ github.run_number }}
        path: |
          articles/
          extemp_questions.txt
          *.backup
        retention-days: 7
        
    - name: Run summary
      if: always()
      run: |
        echo "=== RUN SUMMARY ==="
        echo "üöÄ Workflow: ${{ github.workflow }}"
        echo "üìÖ Run: ${{ github.run_number }}"
        echo "‚è∞ Completed: $(date)"
        
        # Article processing summary
        if [ -f "articles/news_articles.txt" ]; then
          remaining=$(grep -c "^Link: " articles/news_articles.txt 2>/dev/null || echo "0")
          initial="${{ steps.check-articles.outputs.article_count }}"
          processed=$((initial - remaining))
          
          echo "üì∞ Article processing:"
          echo "   - Started with: $initial articles"
          echo "   - Processed: $processed articles" 
          echo "   - Remaining: $remaining articles"
          
          if [ "$remaining" -gt "0" ]; then
            echo "üí° Next run will process more articles"
          else
            echo "üéâ All articles have been processed!"
          fi
        fi
        
        # Question generation summary
        if [ -f "extemp_questions.txt" ]; then
          total_sets=$(grep -c "NSDA EXTEMPORANEOUS SPEAKING QUESTIONS" extemp_questions.txt || echo "0")
          total_questions=$(grep -c "^Q[0-9]\." extemp_questions.txt || echo "0")
          echo "‚úÖ Question generation:"
          echo "   - Total question sets: $total_sets"
          echo "   - Total individual questions: $total_questions"
        fi
        
        echo ""
        echo "üîÑ Process verification:"
        if [ "${{ steps.check-articles.outputs.has_articles }}" = "true" ]; then
          if [ "$processed" -gt "0" ]; then
            echo "‚úÖ Articles were successfully processed and removed"
          else
            echo "‚ùå No articles were processed - check for errors"
          fi
        else
          echo "‚ÑπÔ∏è No articles were available for processing"
        fi
        
    - name: Clean up large files
      run: |
        # Clean up the model file to save space (it will be cached)
        rm -rf models/
        # Clean up any backup files older than this run
        find . -name "*.backup" -type f -delete 2>/dev/null || true
      if: always()